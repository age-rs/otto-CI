---
swagger: "2.0"
info:
  description: "This specification describes the Otto orchestrator"
  version: "1.0.0"
  title: "Otto Orchestrator"
  contact:
    email: "rtyler@brokenco.de"
  license:
    name: "GNU AGPL 3.0"
    url: "https://www.gnu.org/licenses/agpl-3.0.en.html"
host: "localhost:3030"
basePath: "/v1"
schemes:
- "http"
paths:
  /manifest/{agentId}:
    get:
      summary: "Fetch manifest for execution by the given agent"
      description: "Return the full execution manifest for the given agent to execute.\n"
      operationId: "fetchManifest"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "agentId"
        in: "path"
        required: true
        type: "string"
        formatString: "\\\"{}\\\""
        example: "\"agent_id_example\".to_string()"
      responses:
        200:
          description: "Agent ID found and manifest generated"
          schema:
            $ref: "#/definitions/Manifest"
          x-responseId: "AgentIDFoundAndManifestGenerated"
          x-uppercaseResponseId: "AGENT_ID_FOUND_AND_MANIFEST_GENERATED"
          uppercase_operation_id: "FETCH_MANIFEST"
          uppercase_data_type: "MANIFEST"
          producesXml: true
        400:
          description: "Invalid request"
          x-responseId: "InvalidRequest"
          x-uppercaseResponseId: "INVALID_REQUEST"
          uppercase_operation_id: "FETCH_MANIFEST"
      operation_id: "fetch_manifest"
      uppercase_operation_id: "FETCH_MANIFEST"
      path: "/manifest/:agentId"
      PATH_ID: "MANIFEST_AGENTID"
      hasPathParams: true
      HttpMethod: "Get"
definitions:
  Manifest:
    type: "object"
    properties:
      self:
        type: "string"
        description: "The identifier of the agent"
      services:
        $ref: "#/definitions/Service"
      ops:
        type: "array"
        items:
          $ref: "#/definitions/Operation"
    xml:
      name: "Manifest"
    description: "Agent execution manifest"
    example:
      ops:
      - id: "0xdeadbeef"
        context: "0x1"
        type: "RUNPROC"
        data:
          script: "echo \"Hello World\""
          timeout_s: 600
      - id: "0xdeadbeef"
        context: "0x1"
        type: "RUNPROC"
        data:
          script: "echo \"Hello World\""
          timeout_s: 600
      self: "self"
      services:
        datastore: "http://localhost:3031/"
    upperCaseName: "MANIFEST"
  Service:
    type: "object"
    properties:
      identifier:
        type: "string"
        description: "Key to identify the different services"
      url:
        type: "string"
        description: "Resolvable URL to access APIs for the given service"
    xml:
      name: "Service"
    description: "A service ID to URl mapping"
    example:
      datastore: "http://localhost:3031/"
    upperCaseName: "SERVICE"
  Operation:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Globally unique ID to identify this specific operation in data\
          \ stores, etc"
      context:
        type: "string"
        description: "Generally unique context ID to group different operations in\
          \ the same context"
      type:
        description: "Type of operation"
        $ref: "#/definitions/OperationType"
      data:
        type: "object"
        description: "Operation type-specific data for the agent to use"
        properties: {}
    description: "A discrete idempotent operation"
    example:
      id: "0xdeadbeef"
      context: "0x1"
      type: "RUNPROC"
      data:
        script: "echo \"Hello World\""
        timeout_s: 600
    upperCaseName: "OPERATION"
  OperationType:
    type: "string"
    description: "Specific type of the given operation, implies different `data` fields"
    enum:
    - "BEGINCTX"
    - "ENDCTX"
    - "RUNPROC"
    upperCaseName: "OPERATIONTYPE"
externalDocs:
  description: "Find out more about Otto"
  url: "https://github.com/rtyler/otto"
